The ``7-base_geometry.py`` module
======================

Using ``area`` and ``integer_validator`` function from BaseGeometry Class 
------------------------------

Import ``BaseGeometry`` from the ``7-base_geometry.py`` module:

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    
    ------------------
    Test success cases
    ------------------
    >>> bg = BaseGeometry()
    >>> 

    >>> bg.integer_validator("_int", 21)
    >>> 

    >>> bg.integer_validator("hello", 98)
    >>> 

    >>> bg.integer_validator("", 98)
    >>> 

    Test pycodestyle
    ----------------
    >>> import pycodestyle
    >>> fchecker = pycodestyle.Checker('7-base_geometry.py', show_source=True)
    >>> file_errors = fchecker.check_all()
    >>> 

    ----------
    Test Error
    ----------

    Test negative value with empty string
    -------------------------------------
    >>> bg.integer_validator("", -8)
    Traceback (most recent call last):
    ValueError:  must be greater than 0

    Test invalid type value with empty string
    -----------------------------------------
    >>> bg.integer_validator("", 8.5)
    Traceback (most recent call last):
    TypeError:  must be an integer

    Test negative value
    -------------------
    >>> bg.integer_validator("_int", -21)
    Traceback (most recent call last):
    ValueError: _int must be greater than 0

    Test invalid type value
    -----------------------
    >>> bg.integer_validator("_float", 8.5)
    Traceback (most recent call last):
    TypeError: _float must be an integer

    Test no argument value given
    ----------------------------
    >>> bg.integer_validator("_float")
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'

    Test no arguments
    -----------------
    >>> bg.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
